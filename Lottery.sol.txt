// SPDX-License-Identifier: MIT
pragma solidity ^0.8.7;

contract Lottery{

    address payable owner;
    uint maxParticipants;
    uint maxWinners;
    uint participationPrice;
    mapping(address => string) public pseudonym;

    constructor(uint _maxParticipants, uint _maxWinners, uint _participationPrice){
        owner = payable(msg.sender);
        maxParticipants = _maxParticipants;
        maxWinners = _maxWinners;
        participationPrice = _participationPrice;
    }
    
    struct Participant{
        address payable addr;
        string pseudonym;
    }

    Participant[] participants;
    Participant[] winners;

    receive() external payable{
        addParticipant(payable(msg.sender));
    }

    fallback() external{}

    function mapPseudonymToAddr(string memory _pseudonym) public{
        pseudonym[msg.sender] = _pseudonym;
    }

    function getPseudonym() public view returns(string memory){
        return(pseudonym[msg.sender]);
    }

    function addParticipant(address payable _addr) public{
        require(participants.length < maxParticipants);

        if(participants.length < maxParticipants){
            Participant memory newParticipant = Participant(_addr, pseudonym[msg.sender]);
            participants.push(newParticipant);
        }else{
            drawWinners();
            payWinners();
        }
    }

    function getParticipants() public view returns(Participant[] memory){
        return participants;
    }

    function drawWinners() public{

        for(uint i=0; i<participants.length; i++){
            uint randomNumber=random(maxParticipants);
            winners.push(participants[randomNumber]);
        }

    }

    function payWinners() public{
        uint winningPrize = address(this).balance/winners.length;
        for(uint i=0; i<winners.length; i++){
            require(address(this).balance >= winningPrize);
            winners[i].addr.transfer(winningPrize);
        }
    }

    function getContractBalance() public view returns(uint){
        return(address(this).balance);
    }

    function random(uint _number) public view returns(uint){
        return uint(keccak256(abi.encodePacked(block.timestamp,
                                               block.difficulty, 
                                               msg.sender))) % _number;
    }

    function getContractAddress() public view returns(address){
        return(address(this));
    }

}